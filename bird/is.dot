digraph Is {
  label = "Predicative Class Hierarchy without Internal Homs"

  node [fontname = monospace]

  Absorb [label = "Absorbing\n- 0 == 0"]
  Antidistr [label = "Antidistributive\n- (x + y) == - y + - x"]
  Assoc [label = "Associative\nx + (y + z) == (x + y) + z"]
  BinComm [label = "BinaryCommutative?"]
  Cancel [label = "Cancellative"]
  Eq [label = "Equivalence"]
  ExtAbsorb [label = "ExternallyAbsorbing?\nT- T0 ~~ T0"]
  ExtAntidistr [label = "ExternallyAntidistributive?\nT- (x T+ y) ~~ T- y T+ T- x"]
  ExtAssoc [label = "ExternallyAssociative?\nx L+ (y R+ z) ~~ (x L+ y) R+ z"]
  ExtBinComm [label = "ExternallyBinaryCommutative?"]
  ExtInv [label = "ExternallyInvertible?"]
  ExtUnl [label = "ExternallyUnital?"]
  Grp [label = "Group"]
  Inj [label = "Injective\n- x == - y -> x == y"]
  IntInv [label = "InternallyInvertible?"]
  Inv [label = "Invertible"]
  Invol [label = "Involutive\n- - x == x"]
  LBinComm [label = "LeftBinaryCommutative?\n- (x + y) == - x + y"]
  LCancel [label = "LeftCancellative\nz + x == z + y -> x == y"]
  LExtBinComm [label = "LeftExternallyBinaryCommutative?\nL- (x R+ y) == L- x R+ y"]
  LExtInv [label = "LeftExternallyInvertible?\nL- x L+ x ~~ L0"]
  LExtUnl [label = "LeftExternallyUnital?\n0 L+ x ~~ x"]
  LIntInv [label = "LeftInternallyInvertible?\nT- x T+ x ~~ T0"]
  LInv [label = "LeftInvertible\n- x + x == 0"]
  LUnl [label = "LeftUnital\n0 + x == x"]
  Mag [label = "Magma"]
  Mon [label = "Monoid"]
  Proper [label = "Proper"]
  RBinComm [label = "RightBinaryCommutative?\n- (x + y) == x + - y"]
  RCancel [label = "RightCancellative\nx + z == y + z -> x == y"]
  RExtBinComm [label = "RightExternallyBinaryCommutative?\nR- (x L+ y) == x L+ R- y"]
  RExtInv [label = "RightExternallyInvertible?\nx R+ R- x ~~ R0"]
  RExtUnl [label = "RightExternallyUnital?\nx R+ 0 ~~ x"]
  RIntInv [label = "RightInternallyInvertible?\nx T+ T- x ~~ T0"]
  RInv [label = "RightInvertible\nx + - x == 0"]
  RUnl [label = "RightUnital\nx + 0 == x"]
  Refl [label = "Reflexive\nx ~~ x"]
  ReflEq [label = "ReflexiveEquivalence\nx == x"]
  Sgrp [label = "Semigroup"]
  Sym [label = "Symmetric\nx ~~ y -> y ~~ x"]
  SymEq [label = "SymmetricEquivalence\nx == y -> y == x"]
  Trans [label = "Transitive\nx ~~ y -> y ~~ z -> x ~~ z"]
  TransEq [label = "TransitiveEquivalence\nx == y -> y == z -> x == z"]
  Unl [label = "Unital"]

  edge [style = solid]

  Assoc -> Sgrp
  Eq -> Mag
  Inv -> Grp
  LBinComm -> BinComm
  LCancel -> Cancel
  LExtBinComm -> ExtBinComm
  LExtInv -> ExtInv
  LExtUnl -> ExtUnl
  LIntInv -> IntInv
  LInv -> Inv
  LUnl -> Unl
  Mag -> Sgrp
  Mon -> Grp
  Proper -> Grp
  Proper -> Mag
  RBinComm -> BinComm
  RCancel -> Cancel
  RExtBinComm -> ExtBinComm
  RExtInv -> ExtInv
  RExtUnl -> ExtUnl
  RIntInv -> IntInv
  RInv -> Inv
  RUnl -> Unl
  ReflEq -> Eq
  Sgrp -> Mon
  SymEq -> Eq
  TransEq -> Eq
  Unl -> Mon

  edge [style = dashed]

  Absorb -> Grp
  Antidistr -> Grp
  Cancel -> Grp
  ExtAbsorb -> Absorb
  ExtAntidistr -> Antidistr
  ExtAssoc -> Assoc
  ExtBinComm -> BinComm
  ExtInv -> Inv
  ExtUnl -> Unl
  Inj -> Grp
  IntInv -> ExtInv
  Invol -> Grp
  LExtBinComm -> LBinComm
  LExtInv -> LInv
  LExtUnl -> LUnl
  LIntInv -> LExtInv
  RExtBinComm -> RBinComm
  RExtInv -> RInv
  RExtUnl -> RUnl
  RIntInv -> RExtInv
  Refl -> ReflEq
  Sym -> SymEq
  Trans -> TransEq
}
