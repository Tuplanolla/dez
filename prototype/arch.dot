digraph arch {
  // graph [layout = neato, ratio = 0.5]
  graph [layout = dot, mindist = 1, overlap = false, root = primate]

  // graph [splines = curved]
  // edge [headport = e, tailport = w]

  subgraph cluster_maniunfold {
    label = "Project\nManiunfold"

    /*
    node [shape = oval]

    coq [label = "Coq"] // bird
    cxx [label = "C++"] // machine
    ocaml [label = "OCaml"] // mammal
    python [label = "Python"] // reptile
    thrift [label = "Thrift"] // plant
    */

    node [shape = box]

    bird_source [label = "Coq Source\nfor Symbolic Specification"]
    after_bird [label = "OCaml Source\nfor Symbolic Specification"]
    mammal_source [label = "OCaml Source\nfor Symbolic Manipulator"]
    plant_source [label = "Thrift IDL Source\nfor Message Specification"]
    primate_source [label = "OCaml Source\nfor Message Passer"]
    before_primate [label = "OCaml Source\nfor Message Specification"]
    before_machine [label = "C++ Source\nfor Message Specification"]
    before_reptile [label = "Python Source\nfor Message Specification"]
    before_mammal [label = "OCaml Source\nfor Message Specification"]
    machine_proxy_source [label = "C++ Source\nfor Numerical Solver Interface"]
    reptile_source [label = "Python Source\nfor Graphical User Interface"]
    mammal_proxy_source [label = "OCaml Source\nfor Symbolic Manipulator Interface"]

    node [shape = oval]

    primate [label = "Broker\nfor Message Passing"]
    reptile [label = "Client\nfor Graphical User Interaction"]
    reptile_proxy [label = "Client Proxy\nfor Graphical User Interaction"]
    mammal [label = "Server\nfor Symbolic Manipulation"]
    mammal_proxy [label = "Server Proxy\nfor Symbolic Manipulation"]
    machine_proxy [label = "Server Proxy\nfor Numerical Solution"]
  }

  subgraph cluster_gfd {
    label = "Project\nGFD"

    node [shape = box]

    machine_source [label = "C++ Source\nfor Numerical Solver"]

    node [shape = oval]

    machine [label = "Server\nfor Numerical Solver"]
  }

  plant_source -> before_primate [label = "Code Generation"]
  before_primate -> primate [label = "Compilation"]
  plant_source -> before_mammal [label = "Code Generation"]
  before_mammal -> mammal_proxy [label = "Compilation"]
  primate_source -> primate [label = "Compilation"]
  bird_source -> after_bird [label = "Code Extraction"]
  after_bird -> mammal [label = "Compilation"]
  mammal_source -> mammal [label = "Compilation"]
  reptile_source -> reptile [label = "Interpretation"]
  reptile_source -> reptile_proxy [label = "Code Generation"]
  plant_source -> before_reptile [label = "Code Generation"]
  before_reptile -> reptile_proxy [label = "Interpretation"]
  mammal_proxy_source -> mammal_proxy [label = "Compilation"]
  machine_proxy_source -> machine_proxy [label = "Compilation"]
  plant_source -> before_machine [label = "Code Generation"]
  before_machine -> machine_proxy [label = "Compilation"]
  machine_source -> machine [label = "Compilation"]

  reptile -> reptile_proxy [label = "(1) Problem\nas Python Object"]
  reptile_proxy -> primate [label = "(2) Problem\nas Thrift Message"]
  primate -> mammal_proxy [label = "(3) Problem\nas Thrift Message"]
  mammal_proxy -> mammal [label = "(4) Problem\nas an OCaml Object"]
  mammal -> mammal_proxy [label = "(5) Simplified Problem\nas an OCaml Object"]
  mammal_proxy -> primate [label = "(6) Simplified Problem\nas Thrift Message"]
  primate -> machine_proxy [label = "(7) Simplified Problem\nas Thrift Message"]
  machine_proxy -> machine [label = "(8) Simplified Problem\nas C++ Object"]
  machine -> machine_proxy [label = "(9) Simplified Solution\nas C++ Object"]
  machine_proxy -> primate [label = "(10) Simplified Solution\nas Thrift Message"]
  primate -> mammal_proxy [label = "(11) Simplified Solution\nas Thrift Message"]
  mammal_proxy -> mammal [label = "(12) Simplified Solution\nas an OCaml Object"]
  mammal -> mammal_proxy [label = "(13) Solution\nas an OCaml Object"]
  mammal_proxy -> primate [label = "(14) Solution\nas Thrift Message"]
  primate -> reptile_proxy [label = "(15) Solution\nas Thrift Message"]
  reptile_proxy -> reptile [label = "(16) Solution\nas Python Object"]
}
