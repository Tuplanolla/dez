digraph numeral {
  /*
  -- Let us first build a naive tree by summing powers of two.
  let bitTree n = if n == 1 then [(1, [])] else (n, do {b <- [0 .. finiteBitSize n]; guard (testBit n b); if 2 ^ b == n then replicate 2 (n `quot` 2) else pure (2 ^ b)}) : bitTree (n - 1)
  traverse_ (\ (n, bs) -> traverse_ (\ b -> putStr (show b ++ " -> " ++ show n ++ "; ")) bs >> putStrLn "") (bitTree (64 :: Int))
  -- Let us next allow summing previous results as well to reduce the workload.
  -- To use `45 (101101)` as an example, the options are
  -- `32 (100000) + 13 (1101) = 40 (101000) + 5 (101) =
  -- 39 (101100) + 1 (1) = 33 (100001) + 12 (1100) = ...`.
  -- It is easy to see that two terms suffice and
  -- there are `44` such options (`22Â´ with commutativity) to choose from.
  -- However, we would like to favor those terms
  -- that require the fewest total summations.
  -- For all numbers between `33` and `64`,
  -- since each summation involves two terms,
  -- there must be at least one term between `32` and `63`.
  -- Furthermore, of the possible options for this term,
  -- `32` requires one fewer summation than the rest,
  -- so it should always be chosen as one of the terms.
  -- With this in mind, the other term is determined by linearity.
  -- Let us finally build an optimal summation tree based on this observation.
  let msb n = if n == 0 then error "Zero" else maximum [b | b <- [0 .. finiteBitSize n], testBit n b]
  let bitTree n = if n == 1 then [(1, [])] else let m = msb n in (n, if n == 2 ^ m then replicate 2 (n `quot` 2) else [2 ^ m, clearBit n m]) : bitTree (n - 1)
  traverse_ (\ (n, bs) -> traverse_ (\ b -> putStr (show b ++ " -> " ++ show n ++ "; ")) bs >> putStrLn "") (bitTree (64 :: Int))
  */

  1 [label = "1\n1"]
  2 [label = "2\n10"]
  3 [label = "3\n11"]
  4 [label = "4\n100"]
  5 [label = "5\n101"]
  6 [label = "6\n110"]
  7 [label = "7\n111"]
  8 [label = "8\n1000"]
  9 [label = "9\n1001"]
  10 [label = "10\n1010"]
  11 [label = "11\n1011"]
  12 [label = "12\n1100"]
  13 [label = "13\n1101"]
  14 [label = "14\n1110"]
  15 [label = "15\n1111"]
  16 [label = "16\n10000"]
  17 [label = "17\n10001"]
  18 [label = "18\n10010"]
  19 [label = "19\n10011"]
  20 [label = "20\n10100"]
  21 [label = "21\n10101"]
  22 [label = "22\n10110"]
  23 [label = "23\n10111"]
  24 [label = "24\n11000"]
  25 [label = "25\n11001"]
  26 [label = "26\n11010"]
  27 [label = "27\n11011"]
  28 [label = "28\n11100"]
  29 [label = "29\n11101"]
  30 [label = "30\n11110"]
  31 [label = "31\n11111"]
  32 [label = "32\n100000"]
  33 [label = "33\n100001"]
  34 [label = "34\n100010"]
  35 [label = "35\n100011"]
  36 [label = "36\n100100"]
  37 [label = "37\n100101"]
  38 [label = "38\n100110"]
  39 [label = "39\n100111"]
  40 [label = "40\n101000"]
  41 [label = "41\n101001"]
  42 [label = "42\n101010"]
  43 [label = "43\n101011"]
  44 [label = "44\n101100"]
  45 [label = "45\n101101"]
  46 [label = "46\n101110"]
  47 [label = "47\n101111"]
  48 [label = "48\n110000"]
  49 [label = "49\n110001"]
  50 [label = "50\n110010"]
  51 [label = "51\n110011"]
  52 [label = "52\n110100"]
  53 [label = "53\n110101"]
  54 [label = "54\n110110"]
  55 [label = "55\n110111"]
  56 [label = "56\n111000"]
  57 [label = "57\n111001"]
  58 [label = "58\n111010"]
  59 [label = "59\n111011"]
  60 [label = "60\n111100"]
  61 [label = "61\n111101"]
  62 [label = "62\n111110"]
  63 [label = "63\n111111"]
  64 [label = "64\n1000000"]

  1 -> 2; 1 -> 2;
  2 -> 3; 1 -> 3;
  2 -> 4; 2 -> 4;
  4 -> 5; 1 -> 5;
  4 -> 6; 2 -> 6;
  4 -> 7; 3 -> 7;
  4 -> 8; 4 -> 8;
  8 -> 9; 1 -> 9;
  8 -> 10; 2 -> 10;
  8 -> 11; 3 -> 11;
  8 -> 12; 4 -> 12;
  8 -> 13; 5 -> 13;
  8 -> 14; 6 -> 14;
  8 -> 15; 7 -> 15;
  8 -> 16; 8 -> 16;
  16 -> 17; 1 -> 17;
  16 -> 18; 2 -> 18;
  16 -> 19; 3 -> 19;
  16 -> 20; 4 -> 20;
  16 -> 21; 5 -> 21;
  16 -> 22; 6 -> 22;
  16 -> 23; 7 -> 23;
  16 -> 24; 8 -> 24;
  16 -> 25; 9 -> 25;
  16 -> 26; 10 -> 26;
  16 -> 27; 11 -> 27;
  16 -> 28; 12 -> 28;
  16 -> 29; 13 -> 29;
  16 -> 30; 14 -> 30;
  16 -> 31; 15 -> 31;
  16 -> 32; 16 -> 32;
  32 -> 33; 1 -> 33;
  32 -> 34; 2 -> 34;
  32 -> 35; 3 -> 35;
  32 -> 36; 4 -> 36;
  32 -> 37; 5 -> 37;
  32 -> 38; 6 -> 38;
  32 -> 39; 7 -> 39;
  32 -> 40; 8 -> 40;
  32 -> 41; 9 -> 41;
  32 -> 42; 10 -> 42;
  32 -> 43; 11 -> 43;
  32 -> 44; 12 -> 44;
  32 -> 45; 13 -> 45;
  32 -> 46; 14 -> 46;
  32 -> 47; 15 -> 47;
  32 -> 48; 16 -> 48;
  32 -> 49; 17 -> 49;
  32 -> 50; 18 -> 50;
  32 -> 51; 19 -> 51;
  32 -> 52; 20 -> 52;
  32 -> 53; 21 -> 53;
  32 -> 54; 22 -> 54;
  32 -> 55; 23 -> 55;
  32 -> 56; 24 -> 56;
  32 -> 57; 25 -> 57;
  32 -> 58; 26 -> 58;
  32 -> 59; 27 -> 59;
  32 -> 60; 28 -> 60;
  32 -> 61; 29 -> 61;
  32 -> 62; 30 -> 62;
  32 -> 63; 31 -> 63;
  32 -> 64; 32 -> 64;
}
