digraph Is {
  label = "Predicative Classes"
  rankdir = BT

  node [fontname = monospace, style = filled, fillcolor = cornsilk]
  // IsProper [label = "\N X\nproper (x : A) : X x x"]

  subgraph cluster_order_theory_classes {
    label = "Order Theory"
  bgcolor = azure

  IsAntisym [label = "\N X Y\nantisym (x y : A) (a : Y x y) (b : Y y x) : X x y"]
  IsAsym [label = "\N X\nasym (x y : A) (a : X x y) (b : X y x) : 0"]
  IsConnex [label = "\N X\nconnex (x y : A) : X x y \\/ X y x"]
  IsCotrans [label = "\N X\ncotrans (x y z : A) (a : X x z) : X x y \\/ X y z"]
  IsIrrefl [label = "\N X\nirrefl (x : A) (a : X x x) : 0"]
  IsRefl [label = "\N X\nrefl (x : A) : X x x"]
  IsStrConnex [label = "\N X Y\nstr_connex (x y : A) : Y x y \\/ X x y \\/ Y y x"]
  IsSym [label = "\N X\nsym (x y : A) (a : X x y) : X y x"]
  IsTrans [label = "\N X\ntrans (x y z : A) (a : X x y) (b : X y z) : X x z"]

    IsApart [label = "\N X"]
    IsEquiv [label = "\N X"]
    IsPartEquiv [label = "\N X"]
    IsPartOrd [label = "\N X Y"]
    IsPreord [label = "\N X"]
    IsStrPartOrd [label = "\N X"]
    IsStrPreord [label = "\N X"]
    IsStrTotOrd [label = "\N X Y"]
    IsTotOrd [label = "\N X Y"]
  }

  subgraph cluster_cancel {
  label = "Cancellative Fragment"
  bgcolor = azure
  IsCancelBinFnL [label = "\N X Y k\ncancel_bin_fn_l (x : A1) (y z : A0) (a : Y (k x y) (k x z)) : X y z"]
  IsCancelBinFnR [label = "\N X Y k\ncancel_bin_fn_r (x y : A0) (z : A1) (a : Y (k x z) (k y z)) : X x y"]
  IsCancelActL [label = "\N X al\ncancel_act_l (x : A) (a b : B) (s : X (al x a) (al x b)) : X a b"]
  IsCancelActLR [label = "\N X Y al\ncancel_act_l_r (x y : A) (a : B) (s : Y (al x a) (al y a)) : X x y"]
  IsCancelActR [label = "\N X ar\ncancel_act_r (a b : B) (x : A) (s : X (ar a x) (ar b x)) : X a b"]
  IsCancelActRL [label = "\N X Y ar\ncancel_act_r_l (a : B) (x y : A) (s : Y (ar a x) (ar a y)) : X x y"]
  IsCancelFormL [label = "\N X Y s\ncancel_form_l (a b c : B) (t : X (s a b) (s a c)) : Y b c"]
  IsCancelFormR [label = "\N X Y s\ncancel_form_r (a b c : B) (t : X (s a c) (s b c)) : Y a b"]
  IsCancelL [label = "\N X k\ncancel_l (x y z : A) (a : X (k x y) (k x z)) : X y z"]
  IsCancelR [label = "\N X k\ncancel_r (x y z : A) (a : X (k x z) (k y z)) : X x y"]
  IsInj [label = "\N X f\ninj (x y : A) (a : X (f x) (f y)) : X x y"]
  IsInjUnFn [label = "\N X Y f\ninj_un_fn (x y : A) (a : Y (f x) (f y)) : X x y"]
    IsCancel [label = "\N X k"]
    IsCancelForm [label = "\N X Y s"]
  }

  subgraph cluster_assoc {
  label = "Associative Fragment"
  bgcolor = azure
  IsAssoc [label = "\N X k\nassoc (x y z : A) : X (k x (k y z)) (k (k x y) z)"]
  IsCompatActL [label = "\N X k al\ncompat_act_l (x y : A) (a : B) : X (al x (al y a)) (al (k x y) a)"]
  IsCompatActR [label = "\N X k ar\ncompat_act_r (a : B) (x y : A) : X (ar a (k x y)) (ar (ar a x) y)"]
  IsCompatActs [label = "\N X al ar\ncompat_acts (x : A) (a : C) (y : B) : X (al x (ar a y)) (ar (al x a) y)"]
  IsCompatBinFns [label = "\N X k m n p\ncompat_bin_fns (x : A0) (y : A1) (z : A2) : X (n x (m y z)) (p (k x y) z)"]
  }

  subgraph cluster_distr {
  label = "Distributive Fragment"
  bgcolor = azure
  IsDistrUnFns [label = "\N X f g k h m\ndistr_un_fns (x : A0) (y : A1) : X (h (k x y)) (m (f x) (g y))"]
  IsDistrUnFn [label = "\N X f k m\ndistr_un_fn (x y : A) : X (f (k x y)) (m (f x) (f y))"]
  IsDistrUnOp [label = "\N X f k\ndistr_un_op (x y : A) : X (f (k x y)) (k (f x) (f y))"]
  IsAntidistrUnFns [label = "\N X f g k h m\nantidistr_un_fns (x : A0) (y : A1) : X (h (k x y)) (m (f y) (g x))"]
  IsAntidistrUnFn [label = "\N X f k m\nantidistr_un_fn (x y : A) : X (f (k x y)) (m (f y) (f x))"]
  IsAntidistrUnOp [label = "\N X f k\nantidistr_un_op (x y : A) : X (f (k x y)) (k (f y) (f x))"]
  IsDistrBinFnsL [label = "\N X k m n p q\ndistr_bin_fns_l (x : A0) (y : A1) (z : A2) : X (p x (n y z)) (q (k x y) (m x z))"]
  IsDistrBinFnsR [label = "\N X k m n p q\ndistr_bin_fns_r (x : A0) (y : A1) (z : A2) : X (p (n x y) z) (q (k x z) (m y z))"]
  IsDistrActL [label = "\N X al k\ndistr_act_l (x : A) (a b : B) : X (al x (k a b)) (k (al x a) (al x b))"]
  IsDistrActR [label = "\N X ar k\ndistr_act_r (a b : B) (x : A) : X (ar (k a b) x) (k (ar a x) (ar b x))"]
  IsDistrL [label = "\N X k m\ndistr_l (x y z : A) : X (k x (m y z)) (m (k x y) (k x z))"]
  IsDistrR [label = "\N X k m\ndistr_r (x y z : A) : X (k (m x y) z) (m (k x z) (k y z))"]
    IsDistr [label = "\N X k m"]
  }

  subgraph cluster_inv {
  label = "Invertible Fragment"
  bgcolor = azure
  IsInvBinFnL [label = "\N X x f k\ninv_bin_fn_l (y : A) : X (k (f y) y) x"]
  IsInvBinFnR [label = "\N X x f k\ninv_bin_fn_r (y : A) : X (k y (f y)) x"]
  IsInvFormL [label = "\N X x f s\ninv_form_l (y : A) : X (s (f y) y) x"]
  IsInvFormR [label = "\N X x f s\ninv_form_r (y : A) : X (s y (f y)) x"]
  IsInvL [label = "\N X x f k\ninv_l (y : A) : X (k (f y) y) x"]
  IsInvR [label = "\N X x f k\ninv_r (y : A) : X (k y (f y)) x"]
    IsInv [label = "\N X x f k"]
    IsInvForm [label = "\N X x f s"]
  }

  subgraph cluster_unl {
  label = "Unital Fragment"
  bgcolor = azure
  IsUnlElemActL [label = "\N X x al\nunl_elem_act_l (a : B) : X (al x a) a"]
  IsUnlElemActR [label = "\N X x ar\nunl_elem_act_r (a : B) : X (ar a x) a"]
  IsUnlElemL [label = "\N X x k\nunl_elem_l (y : A) : X (k x y) y"]
  IsUnlElemR [label = "\N X x k\nunl_elem_r (y : A) : X (k y x) y"]
    IsUnlElem [label = "\N X x k"]
  }

  subgraph cluster_absorb {
  label = "Absorbing Fragment"
  bgcolor = azure
  IsAbsorbElemActLR [label = "\N X a al\nabsorb_elem_act_l_r (x : A) : X (al x a) a"]
  IsAbsorbElemActRL [label = "\N X a ar\nabsorb_elem_act_r_l (x : A) : X (ar a x) a"]
  IsAbsorbElemL [label = "\N X x k\nabsorb_elem_l (y : A) : X (k x y) x"]
  IsAbsorbElemR [label = "\N X x k\nabsorb_elem_r (y : A) : X (k y x) x"]
  IsFixed [label = "\N X x f\nfixed : X (f x) x"]
  IsIdemBinOp [label = "\N X k\nidem_bin_op (x : A) : X (k x x) x"]
  IsIdemElemBinOp [label = "\N X x k\nidem_elem_bin_op : X (k x x) x"]
  IsIdemElemUnOp [label = "\N X x f\nidem_elem_un_op : X (f (f x)) (f x)"]
  IsIdemUnOp [label = "\N X f\nidem_un_op (x : A) : X (f (f x)) (f x)"]
  IsInvol [label = "\N X f\ninvol (x : A) : X (f (f x)) x"]
  IsInvolElem [label = "\N X x f\ninvol_elem : X (f (f x)) x"]
    IsAbsorbElem [label = "\N X x k"]
  }

  subgraph cluster_comm {
  label = "Commutative Fragment"
  bgcolor = azure
  IsComm [label = "\N X k f"]
  IsCommActLsR [label = "\N X al f bl\ncomm_act_ls_r (x : A) (a : B) : X (bl x (f a)) (f (al x a))"]
  IsCommActRsL [label = "\N X ar f br\ncomm_act_rs_l (a : B) (x : A) : X (br (f a) x) (f (ar a x))"]
  IsCommBinFnsL [label = "\N X k f m g\ncomm_bin_fns_l (x : A0) (y : A1) : X (m (f x) y) (g (k x y))"]
  IsCommBinFnsR [label = "\N X k f m g\ncomm_bin_fns_r (x : A0) (y : A1) : X (m x (f y)) (g (k x y))"]
  IsCommBinOp [label = "\N X k\ncomm_bin_op (x y : A) : X (k x y) (k y x)"]
  IsCommElemsBinOp [label = "\N X k x y\ncomm_elems_bin_op : X (k x y) (k y x)"]
  IsCommElemsForm [label = "\N X s a b\ncomm_elems_form (a b : B) : X (s a b) (s b a)"]
  IsCommForm [label = "\N X s\ncomm_form (a b : B) : X (s a b) (s b a)"]
  IsCommL [label = "\N X k f\ncomm_l (x y : A) : X (k (f x) y) (f (k x y))"]
  IsCommR [label = "\N X k f\ncomm_r (x y : A) : X (k x (f y)) (f (k x y))"]
  IsCommUnOps [label = "\N X f g\ncomm_un_ops (x : A) : X (f (g x)) (g (f x))"]
  }

  subgraph cluster_pres {
  label = "Preserving Fragment"
  bgcolor = azure
  IsBinPres [label = "\N X k m f\nbin_pres (x y : A) : X (f (k x y)) (m (f x) (f y))"]
  IsNullPres [label = "\N X x y f\nnull_pres : X (f x) y"]
  IsUnPres [label = "\N X f g h\nun_pres (x : A) : X (h (f x)) (g (h x))"]
  }

  subgraph cluster_abstract_algebra_classes {
    label = "Abstract Algebra"
  bgcolor = mistyrose

    IsGrp [label = "\N X x f k"]
    IsGrpActL [label = "\N X x f k Y al"]
    IsGrpHom [label = "\N h"]
    IsMon [label = "\N X x k"]
    IsRing [label = "\N X x f k y m", color = red, fillcolor = yellow]
    IsRingHom [label = "\N h"]
    IsSemigrp [label = "\N X k"]
    IsSemiring [label = "\N X x k y m"]
  }

  subgraph cluster_infl {
  label = "Inflationary Fragment"
  bgcolor = azure
  IsInfl [label = "\N X k"]
  IsInflActL [label = "\N X al\ninfl_act_l (x : A) (a : B) : X a (al x a)"]
  IsInflActR [label = "\N X ar\ninfl_act_r (a : B) (x : A) : X a (ar a x)"]
  IsInflL [label = "\N X k\ninfl_l (x y : A) : X y (k x y)"]
  IsInflR [label = "\N X k\ninfl_r (x y : A) : X x (k x y)"]
  IsInflUnOp [label = "\N X f\ninfl_un_op (x : A) : X x (f x)"]
  }

  IsContract [label = "\N\ncontract (x y : A) : dist (f x) (f y) <= dist x y", color = red, fillcolor = yellow]
  IsExpand [label = "\N\nexpand (x y : A) : dist x y <= dist (f x) (f y)", color = red, fillcolor = yellow]
  IsCohOrdRels [label = "\N\ncoh_ord_rels (x y : A) : x < y <-> x <= y /\\ x <> y", color = red, fillcolor = yellow]
  IsStrComono [label = "\N\nstr_comono (x y : A) (a : f x < f y) : x < y", color = red, fillcolor = yellow]
  IsStrMono [label = "\N\nstr_mono (x y : A) (a : x < y) : f x < f y", color = red, fillcolor = yellow]
  IsComono [label = "\N\ncomono (x y : A) (a : f x <= f y) : x <= y", color = red, fillcolor = yellow]
  IsMono [label = "\N\nmono (x y : A) (a : x <= y) : f x <= f y", color = red, fillcolor = yellow]
  IsMonoBinOp [label = "\N\nmono_bin_op (x0 y0 : A) (a0 : x0 <= y0) (x1 y1 : A) (a1 : x1 <= y1) : x0 + x1 <= y0 + y1", color = red, fillcolor = yellow]
  IsMonoBinOpL [label = "\N\nmono_bin_op_l (x y z : A) (a : x <= y) : z + x <= z + y", color = red, fillcolor = yellow]
  IsMonoBinOpR [label = "\N\nmono_bin_op_r (x y z : A) (a : x <= y) : x + z <= y + z", color = red, fillcolor = yellow]
  IsUpperBnd [label = "\N\nupper_bnd (y : A) : y <= x", color = red, fillcolor = yellow]
  IsLowerBnd [label = "\N\nlower_bnd (y : A) : x <= y", color = red, fillcolor = yellow]

  subgraph cluster_ext {
  label = "Extensional Fragment"
  IsFunExt [label = "\N\nfun_ext (A B : Type) (f g : A -> B) (a : forall x : A, f x = g x) : f = g", color = red, fillcolor = yellow]
  IsFunExtDep [label = "\N\nfun_ext_dep (A : Type) (P : A -> Type) (f g : forall x : A, P x) (a : forall x : A, f x = g x) : f = g", color = red, fillcolor = yellow]
  IsPropExt [label = "\N\nprop_ext (A B) (a : A <-> B) : A = B", color = red, fillcolor = yellow]
  IsIsoL [label = "\N\niso_l (a : A) : g (f a) = a", color = red, fillcolor = yellow]
  IsIsoR [label = "\N\niso_r (b : B) : f (g b) = b", color = red, fillcolor = yellow]
  }

  subgraph cluster_hott {
  label = "Homotopy Fragment"
  IsContr [label = "\N\ncontr : exists x : A, forall y : A, x = y", color = red, fillcolor = yellow]
  IsProp [label = "\N\nirrel (x y : A) : x = y", color = red, fillcolor = yellow]
  IsSet [label = "\N\nuip (x y : A) (a b : x = y) : a = b", color = red, fillcolor = yellow]
  IsTrunc [label = "\N\ntrunc_zero (A : Type) : IsTrunc O A\ntrunc_succ (n : nat) (A : Type) : IsTrunc (S n) A", color = red, fillcolor = yellow]
  }

  node [style = dashed]

  // Fields

  edge [style = solid]

  subgraph order_theory_fields {
    IsApart -> IsCotrans
    IsApart -> IsIrrefl
    IsApart -> IsSym
    IsEquiv -> IsRefl
    IsEquiv -> IsSym
    IsEquiv -> IsTrans
    IsPartEquiv -> IsSym
    IsPartEquiv -> IsTrans
    IsPartOrd -> IsAntisym
    IsPartOrd -> IsEquiv
    IsPartOrd -> IsPreord
    // IsPartOrd -> IsProper
    IsPreord -> IsRefl
    IsPreord -> IsTrans
    IsStrPartOrd -> IsIrrefl
    // IsStrTotOrd -> IsProper
    IsStrPartOrd -> IsTrans
    IsStrPreord -> IsIrrefl
    IsStrPreord -> IsTrans
    IsStrTotOrd -> IsConnex
    IsStrTotOrd -> IsStrPartOrd
    IsTotOrd -> IsConnex
    IsTotOrd -> IsPartOrd
  }

  subgraph metric_geometry_fields {
    IsInfl -> IsInflL
    IsInfl -> IsInflR
  }

  subgraph abstract_algebra_fields {
    IsAbsorbElem -> IsAbsorbElemL
    IsAbsorbElem -> IsAbsorbElemR
    IsCancel -> IsCancelL
    IsCancel -> IsCancelR
    IsCancelForm -> IsCancelFormL
    IsCancelForm -> IsCancelFormR
    IsComm -> IsCommL
    IsComm -> IsCommR
    IsDistr -> IsDistrL
    IsDistr -> IsDistrR
    IsGrp -> IsInv
    IsGrp -> IsMon
    // IsGrp -> IsProper
    IsGrpActL -> IsCompatActL
    IsGrpActL -> IsGrp
    IsGrpActL -> IsUnlElemActL
    // IsGrpActL -> IsProper
    IsGrpHom -> IsBinPres
    IsGrpHom -> IsGrp
    IsGrpHom -> IsGrp
    // IsGrpHom -> IsProper
    IsInv -> IsInvL
    IsInv -> IsInvR
    IsInvForm -> IsInvFormL
    IsInvForm -> IsInvFormR
    IsMon -> IsSemigrp
    IsMon -> IsUnlElem
    IsSemiring -> IsAbsorbElem
    IsSemiring -> IsCommBinOp
    IsSemiring -> IsDistr
    IsSemiring -> IsMon
    IsSemiring -> IsMon
    IsRing -> IsCommBinOp
    IsRing -> IsDistr
    IsRing -> IsGrp
    IsRing -> IsMon
    IsRingHom -> IsBinPres
    IsRingHom -> IsBinPres
    IsRingHom -> IsNullPres
    IsRingHom -> IsRing
    IsRingHom -> IsRing
    // IsRingHom -> IsProper
    IsSemigrp -> IsAssoc
    IsSemigrp -> IsEquiv
    // IsSemigrp -> IsProper
    IsUnlElem -> IsUnlElemL
    IsUnlElem -> IsUnlElemR
  }

  edge [color = red]

  IsIsoLR -> IsIsoL
  IsIsoLR -> IsIsoR

  // Derivations

  edge [style = dashed]

  edge [color = black]

  subgraph order_theory_derivations {
    IsConnex -> IsComm [label = "or"]
    IsConnex -> IsStrConnex
    IsEquiv -> IsPartEquiv
    IsEquiv -> IsPreord
    IsPartOrd -> IsRefl
    IsPartOrd -> IsTrans
    IsStrPartOrd -> IsAsym
    IsStrPartOrd -> IsStrPreord
    IsStrTotOrd -> IsAsym
    IsStrTotOrd -> IsIrrefl
    IsStrTotOrd -> IsTrans
    IsSym -> IsCommForm [label = "impl"]
    IsTotOrd -> IsAntisym
    IsTotOrd -> IsRefl
    IsTotOrd -> IsTrans
  }

  subgraph metric_geometry_derivations {
    IsInflL -> IsInflR [label = "flip"]
    IsInflL -> IsInflUnOp [label = "apply"]
    IsInflR -> IsInflUnOp [label = "flip apply"]
    IsInflActL -> IsInflActR [label = "flip"]
    IsInflActL -> IsInflUnOp [label = "apply"]
    IsInflActR -> IsInflUnOp [label = "flip apply"]
  }

  subgraph abstract_algebra_derivations {
    IsAbsorbElemActLR -> IsFixed [label = "apply"]
    IsAbsorbElemActRL -> IsAbsorbElemActLR [label = "flip"]
    IsAbsorbElemActRL -> IsFixed [label = "flip apply"]
    IsAbsorbElemL -> IsAbsorbElemR [label = "flip"]
    IsAntidistrUnFn -> IsAntidistrUnFns
    IsAntidistrUnOp -> IsAntidistrUnFns
    IsAssoc -> IsCompatBinFns
    IsCancelActL -> IsCancelBinFnL
    IsCancelActLR -> IsCancelBinFnR
    IsCancelActR -> IsCancelBinFnR
    IsCancelActRL -> IsCancelBinFnL
    IsCancelBinFnL -> IsCancelBinFnR [label = "flip"]
    IsCancelBinFnL -> IsInjUnFn [label = "apply"]
    IsCancelBinFnR -> IsInjUnFn [label = "flip apply"]
    IsCancelFormL -> IsCancelBinFnL
    IsCancelFormR -> IsCancelBinFnR
    IsCancelL -> IsCancelBinFnL
    IsCancelR -> IsCancelBinFnR
    IsCommActLsR -> IsCommBinFnsR
    IsCommActRsL -> IsCommBinFnsL
    IsCommBinFnsL -> IsCommBinFnsR [label = "flip"]
    IsCommBinOp -> IsCommElemsBinOp [label = "apply"]
    IsCommForm -> IsCommElemsForm [label = "apply"]
    IsCommL -> IsCommBinFnsL
    IsCommL -> IsCommUnOps [label = "flip apply"]
    IsCommR -> IsCommBinFnsR
    IsCommR -> IsCommUnOps [label = "apply"]
    IsCommUnOps -> IsCommElemsBinOp [label = "compose"]
    IsCommUnOps -> IsUnPres
    IsCompatActL -> IsCompatActR [label = "flip"]
    IsCompatActL -> IsCompatBinFns
    IsCompatActR -> IsCompatBinFns
    IsCompatActs -> IsCompatBinFns
    IsDistrActL -> IsDistrBinFnsL
    IsDistrActR -> IsDistrBinFnsR
    IsDistrBinFnsL -> IsDistrBinFnsR [label = "flip"]
    IsDistrBinFnsL -> IsDistrUnFns [label = "apply"]
    IsDistrBinFnsR -> IsDistrUnFns [label = "flip apply"]
    IsDistrL -> IsDistrBinFnsL
    IsDistrR -> IsDistrBinFnsR
    IsDistrUnFn -> IsBinPres
    IsDistrUnFn -> IsDistrUnFns
    IsDistrUnOp -> IsDistrUnFns
    IsFixed -> IsNullPres
    IsGrp -> IsAntidistrUnOp
    IsGrp -> IsCancel
    IsGrp -> IsFixed
    IsGrp -> IsInj
    IsGrp -> IsInvol
    IsGrpHom -> IsNullPres
    IsGrpHom -> IsUnPres
    IsIdemBinOp -> IsIdemElemBinOp [label = "apply"]
    IsIdemUnOp -> IsIdemElemBinOp [label = "compose"]
    IsIdemUnOp -> IsIdemElemUnOp [label = "apply"]
    IsInj -> IsInjUnFn
    IsInjUnFn -> IsDistrUnFns [label = "flip impl\nid"]
    IsInvBinFnL -> IsInvBinFnR [label = "flip"]
    IsInvFormL -> IsInvBinFnL
    IsInvFormR -> IsInvBinFnR
    IsInvL -> IsInvBinFnL
    IsInvR -> IsInvBinFnR
    IsInvol -> IsInvolElem [label = "apply"]
    // IsProper -> IsDistrUnFns [label = "impl\nid"]
    IsRing -> IsAbsorbElem
    IsRing -> IsComm
    IsRing -> IsSemiring
    IsUnlElemActL -> IsUnlElemActR [label = "flip"]
    IsUnlElemL -> IsUnlElemR [label = "flip"]
  }

  edge [color = red]

  IsContr -> IsProp
  IsContr -> IsTrunc
  IsFunExtDep -> IsFunExt
  IsMono -> IsStrMono
  IsMonoBinOp -> IsMonoBinOpL
  IsMonoBinOp -> IsMonoBinOpR
  IsProp -> IsSet
  IsProp -> IsTrunc
  IsSet -> IsTrunc
  IsStrMono -> IsMono
  IsTrunc -> IsContr
  IsTrunc -> IsProp
  IsTrunc -> IsSet

  // Specializations

  edge [color = black]

  edge [color = red]
}
