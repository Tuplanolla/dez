digraph Is {
  label = "Predicative Classes"
  rankdir = BT

  node [fontname = monospace, style = filled, fillcolor = cornsilk]

  IsProper [label = "\N\nproper (x : A) : X x x"]
  IsComm [label = "\N\ncomm (x y : A) : X (k x y) (k y x)"]

  subgraph order_theory_classes {
    IsAntisym [label = "\N\nantisym (x y : A) (a : Y x y) (b : Y y x) : X x y"]
    IsApart [label = "\N"]
    IsAsym [label = "\N\nasym (x y : A) (a : X x y) (b : X y x) : 0"]
    IsConnex [label = "\N\nconnex (x y : A) : X x y \\/ X y x"]
    IsCotrans [label = "\N\ncotrans (x y z : A) (a : X x z) : X x y \\/ X y z"]
    IsEquiv [label = "\N"]
    IsIrrefl [label = "\N\nirrefl (x : A) (a : X x x) : 0"]
    IsPartEquiv [label = "\N"]
    IsPartOrd [label = "\N"]
    IsPreord [label = "\N"]
    IsRefl [label = "\N\nrefl (x : A) : X x x"]
    IsStrConnex [label = "\N\nstr_connex (x y : A) : Y x y \\/ X x y \\/ Y y x"]
    IsStrPartOrd [label = "\N"]
    IsStrPreord [label = "\N"]
    IsStrTotOrd [label = "\N"]
    IsSym [label = "\N\nsym (x y : A) (a : X x y) : X y x"]
    IsTotOrd [label = "\N"]
    IsTrans [label = "\N\ntrans (x y z : A) (a : X x y) (b : X y z) : X x z"]
  }

  IsAbsorbElemL [label = "\N\nabsorb_elem_l (x : A) : 0 * x = 0", color = red, fillcolor = yellow]
  IsAbsorbElemLR [label = "\N", color = red, fillcolor = yellow]
  IsAbsorbElemR [label = "\N\nabsorb_elem_r (x : A) : x * 0 = 0", color = red, fillcolor = yellow]
  IsAntidistr [label = "\N\nantidistr (x y : A) : f (x + y) = f y + f x", color = red, fillcolor = yellow]
  IsAssoc [label = "\N\nassoc (x y z : A) : x * (y * z) = (x * y) * z", color = red, fillcolor = yellow]
  IsCancelL [label = "\N\ncancel_l (x y z : A) (a : z + x = z + y) : x = y", color = red, fillcolor = yellow]
  IsCancelLR [label = "\N", color = red, fillcolor = yellow]
  IsCancelR [label = "\N\ncancel_r (x y z : A) (a : x + z = y + z) : x = y", color = red, fillcolor = yellow]
  IsCohOrdRels [label = "\N\ncoh_ord_rels (x y : A) : x < y <-> x <= y /\\ x <> y", color = red, fillcolor = yellow]
  IsCommBinOp [label = "\N\ncomm (x y : A) : x * y = y * x", color = red, fillcolor = yellow]
  IsCommL [label = "\N\ncomm_l (x y : A) : (/ x) * y = / (x * y)", color = red, fillcolor = yellow]
  IsCommLR [label = "\N", color = red, fillcolor = yellow]
  IsCommR [label = "\N\ncomm_r (x y : A) : x * (/ y) = / (x * y)", color = red, fillcolor = yellow]
  IsCommTorL [label = "\N\ncomm_tor_l (x y : B) : y / x = x / y", color = red, fillcolor = yellow]
  IsCommTorR [label = "\N\ncomm_tor_r (x y : B) : y / x = x / y", color = red, fillcolor = yellow]
  IsComono [label = "\N\ncomono (x y : A) (a : f x <= f y) : x <= y", color = red, fillcolor = yellow]
  IsCompat [label = "\N\ncompat (a : A) (x : C) (b : B) : a *< (x >* b) = (a *< x) >* b", color = red, fillcolor = yellow]
  IsCompatL [label = "\N\ncompat_l (a b : A) (x : B) : a *< (b *< x) = (a * b) *< x", color = red, fillcolor = yellow]
  IsCompatR [label = "\N\ncompat_r (x : B) (a b : A) : x >* (a * b) = (x >* a) >* b", color = red, fillcolor = yellow]
  IsContr [label = "\N\ncontr : exists x : A, forall y : A, x = y", color = red, fillcolor = yellow]
  IsDefl [label = "\N\ndeflate (x : A) : f x <= x", color = red, fillcolor = yellow]
  IsDistr [label = "\N\ndistr (x y : A) : f (x + y) = f x + f y", color = red, fillcolor = yellow]
  IsDistrL [label = "\N\ndistr_l (x y z : A) : x * (y + z) = x * y + x * z", color = red, fillcolor = yellow]
  IsDistrLR [label = "\N", color = red, fillcolor = yellow]
  IsDistrR [label = "\N\ndistr_r (x y z : A) : (x + y) * z = x * z + y * z", color = red, fillcolor = yellow]
  IsExpand [label = "\N\ncontract (x y : A) : dist (f x) (f y) <= dist x y", color = red, fillcolor = yellow]
  IsExpand [label = "\N\nexpand (x y : A) : dist x y <= dist (f x) (f y)", color = red, fillcolor = yellow]
  IsFixed [label = "\N\nfixed : f x = x", color = red, fillcolor = yellow]
  IsFunExt [label = "\N\nfun_ext (A B : Type) (f g : A -> B) (a : forall x : A, f x = g x) : f = g", color = red, fillcolor = yellow]
  IsFunExtDep [label = "\N\nfun_ext_dep (A : Type) (P : A -> Type) (f g : forall x : A, P x) (a : forall x : A, f x = g x) : f = g", color = red, fillcolor = yellow]
  IsGrp [label = "\N", color = red, fillcolor = yellow]
  IsIdem [label = "\N\nidem (x : A) : f (f x) = f x", color = red, fillcolor = yellow]
  IsIdemBinOp [label = "\N\nidem_bin_op (x : A) : x * x = x", color = red, fillcolor = yellow]
  IsIdemElem [label = "\N\nidem_elem : x * x = x", color = red, fillcolor = yellow]
  IsInfl [label = "\N\ninfl (x : A) : x <= f x", color = red, fillcolor = yellow]
  IsInflateBinOpL [label = "\N\ninflate_bin_op_l (x y : A) : y <= x + y", color = red, fillcolor = yellow]
  IsInflateBinOpR [label = "\N\ninflate_bin_op_r (x y : A) : x <= x + y", color = red, fillcolor = yellow]
  IsInj [label = "\N\ninj (x y : A) (a : f x = f y) : x = y", color = red, fillcolor = yellow]
  IsInvL [label = "\N\ninv_l (x : A) : (- x) + x = 0", color = red, fillcolor = yellow]
  IsInvLR [label = "\N", color = red, fillcolor = yellow]
  IsInvR [label = "\N\ninv_r (x : A) : x + (- x) = 0", color = red, fillcolor = yellow]
  IsInvol [label = "\N\ninvol (x : A) : f (f x) = x", color = red, fillcolor = yellow]
  IsIsoL [label = "\N\niso_l (a : A) : g (f a) = a", color = red, fillcolor = yellow]
  IsIsoLR [label = "\N", color = red, fillcolor = yellow]
  IsIsoR [label = "\N\niso_r (b : B) : f (g b) = b", color = red, fillcolor = yellow]
  IsLowerBnd [label = "\N\nlower_bnd (y : A) : x <= y", color = red, fillcolor = yellow]
  IsMag [label = "\N", color = red, fillcolor = yellow]
  IsMetric [label = "\N", color = red, fillcolor = yellow]
  IsMon [label = "\N", color = red, fillcolor = yellow]
  IsMono [label = "\N\nmono (x y : A) (a : x <= y) : f x <= f y", color = red, fillcolor = yellow]
  IsMonoBinOp [label = "\N\nmono_bin_op (x0 y0 : A) (a0 : x0 <= y0) (x1 y1 : A) (a1 : x1 <= y1) : x0 + x1 <= y0 + y1", color = red, fillcolor = yellow]
  IsMonoBinOpL [label = "\N\nmono_bin_op_l (x y z : A) (a : x <= y) : z + x <= z + y", color = red, fillcolor = yellow]
  IsMonoBinOpR [label = "\N\nmono_bin_op_r (x y z : A) (a : x <= y) : x + z <= y + z", color = red, fillcolor = yellow]
  IsNonzeroCancelL [label = "\N\nnonzero_cancel_l (x y z : A) (f : z <> 0) (a : z + x = z + y) : x = y", color = red, fillcolor = yellow]
  IsNonzeroCancelLR [label = "\N", color = red, fillcolor = yellow]
  IsNonzeroCancelR [label = "\N\nnonzero_cancel_r (x y z : A) (f : z <> 0) (a : x + z = y + z) : x = y", color = red, fillcolor = yellow]
  IsProp [label = "\N\nirrel (x y : A) : x = y", color = red, fillcolor = yellow]
  IsRing [label = "\N", color = red, fillcolor = yellow]
  IsSemigrp [label = "\N", color = red, fillcolor = yellow]
  IsSemiring [label = "\N", color = red, fillcolor = yellow]
  IsSet [label = "\N\nuip (x y : A) (a b : x = y) : a = b", color = red, fillcolor = yellow]
  IsStrComono [label = "\N\nstr_comono (x y : A) (a : f x < f y) : x < y", color = red, fillcolor = yellow]
  IsStrMono [label = "\N\nstr_mono (x y : A) (a : x < y) : f x < f y", color = red, fillcolor = yellow]
  IsTrunc [label = "\N\ntrunc_zero (A : Type) : IsTrunc O A\ntrunc_succ (n : nat) (A : Type) : IsTrunc (S n) A", color = red, fillcolor = yellow]
  IsUnlActL [label = "\N\nunl_act_l (x : B) : 1 * x = x", color = red, fillcolor = yellow]
  IsUnlActLR [label = "\N", color = red, fillcolor = yellow]
  IsUnlActR [label = "\N\nunl_act_r (x : B) : x * 1 = x", color = red, fillcolor = yellow]
  IsUnlBinOpL [label = "\N\nunl_bin_op_l (x : A) : 1 * x = x", color = red, fillcolor = yellow]
  IsUnlBinOpLR [label = "\N", color = red, fillcolor = yellow]
  IsUnlBinOpR [label = "\N\nunl_bin_op_r (x : A) : x * 1 = x", color = red, fillcolor = yellow]
  IsUpperBnd [label = "\N\nupper_bnd (y : A) : y <= x", color = red, fillcolor = yellow]

  node [style = dashed]

  // Fields

  edge [style = solid]

  subgraph order_theory_fields {
    IsApart -> IsCotrans
    IsApart -> IsIrrefl
    IsApart -> IsSym
    IsEquiv -> IsRefl
    IsEquiv -> IsSym
    IsEquiv -> IsTrans
    IsPartEquiv -> IsSym
    IsPartEquiv -> IsTrans
    IsPartOrd -> IsAntisym
    IsPartOrd -> IsEquiv
    IsPartOrd -> IsPreord
    // IsPartOrd -> IsProper
    IsPreord -> IsRefl
    IsPreord -> IsTrans
    IsStrPartOrd -> IsIrrefl
    // IsStrTotOrd -> IsProper
    IsStrPartOrd -> IsTrans
    IsStrPreord -> IsIrrefl
    IsStrPreord -> IsTrans
    IsStrTotOrd -> IsConnex
    IsStrTotOrd -> IsStrPartOrd
    IsTotOrd -> IsConnex
    IsTotOrd -> IsPartOrd
  }

  edge [color = red]

  IsAbsorbElemLR -> IsAbsorbElemL
  IsAbsorbElemLR -> IsAbsorbElemR
  IsCancelLR -> IsCancelL
  IsCancelLR -> IsCancelR
  IsCommLR -> IsCommL
  IsCommLR -> IsCommR
  IsCommTorLR -> IsCommTorL
  IsCommTorLR -> IsCommTorR
  IsDistrLR -> IsDistrL
  IsDistrLR -> IsDistrR
  IsGrp -> IsInvLR
  IsGrp -> IsMon
  IsInvLR -> IsInvL
  IsInvLR -> IsInvR
  IsIsoLR -> IsIsoL
  IsIsoLR -> IsIsoR
  IsMon -> IsSemigrp
  IsMon -> IsUnlBinOpLR
  IsNonzeroCancelLR -> IsNonzeroCancelL
  IsNonzeroCancelLR -> IsNonzeroCancelR
  IsRing -> IsCommBinOp
  IsRing -> IsDistrLR
  IsRing -> IsGrp
  IsRing -> IsMon
  IsSemigrp -> IsAssoc
  IsSemigrp -> IsMag
  IsSemiring -> IsAbsorbElemLR
  IsSemiring -> IsCommBinOp
  IsSemiring -> IsDistrLR
  IsSemiring -> IsMon
  IsUnlActLR -> IsUnlActL
  IsUnlActLR -> IsUnlActR
  IsUnlBinOpLR -> IsUnlBinOpL
  IsUnlBinOpLR -> IsUnlBinOpR

  // Derivations

  edge [style = dashed]

  edge [color = black]

  subgraph order_theory_derivations {
    IsConnex -> IsStrConnex
    IsEquiv -> IsPartEquiv
    IsEquiv -> IsPreord
    IsPartOrd -> IsRefl
    IsPartOrd -> IsTrans
    IsStrPartOrd -> IsAsym
    IsStrPartOrd -> IsStrPreord
    IsStrTotOrd -> IsAsym
    IsStrTotOrd -> IsIrrefl
    IsStrTotOrd -> IsTrans
    IsTotOrd -> IsAntisym
    // IsTotOrd -> IsProper
    IsTotOrd -> IsRefl
    IsTotOrd -> IsTrans
  }

  edge [color = red]

  IsAssoc -> IsCompat
  IsAssoc -> IsCompatL
  IsAssoc -> IsCompatR
  IsCommTorL -> IsCommBinOp
  IsCommTorR -> IsCommBinOp
  IsContr -> IsProp
  IsContr -> IsTrunc
  IsFunExtDep -> IsFunExt
  IsGrp -> IsAntidistr
  IsGrp -> IsCancelLR
  IsGrp -> IsFixed
  IsGrp -> IsInj
  IsGrp -> IsInvol
  IsIdemBinOp -> IsIdemElem
  IsMono -> IsStrMono
  IsMonoBinOp -> IsMonoBinOpL
  IsMonoBinOp -> IsMonoBinOpR
  IsProp -> IsSet
  IsProp -> IsTrunc
  IsRing -> IsAbsorbElemLR
  IsRing -> IsCommLR
  IsRing -> IsSemiring
  IsSemiring -> IsContr
  IsSet -> IsTrunc
  IsStrMono -> IsMono
  IsTrunc -> IsContr
  IsTrunc -> IsProp
  IsTrunc -> IsSet
  IsUnlBinOpL -> IsUnlActL
  IsUnlBinOpLR -> IsUnlActLR
  IsUnlBinOpR -> IsUnlActR

  // Specializations

  edge [style = dotted]

  edge [color = black]

  IsConnex -> IsComm
  IsSym -> IsComm

  edge [color = red]
}
